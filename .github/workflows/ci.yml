name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for sensitive files
        run: |
          if git ls-files | grep -E '\.env$|\.env\.|password|secret|token' | grep -v '.example' | grep -v '.yml'; then
            echo "ERROR: Sensitive files detected in repository!"
            exit 1
          fi
          
      - name: Scan for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          
  test:
    runs-on: ubuntu-latest
    needs: security-check
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run syntax check
        run: |
          python -m py_compile main.py
          find src -name "*.py" -exec python -m py_compile {} \;
          
      - name: Run tests
        run: |
          pytest src/tests/ -v --tb=short --maxfail=5
          
      - name: Generate coverage report
        run: |
          pytest --cov=src --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          docker build -t strunz-knowledge:test .
          
      - name: Test Docker image
        run: |
          docker run --rm strunz-knowledge:test python -c "import src.mcp.enhanced_server; print('Server module loaded successfully')"
          
  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --environment production
          
      - name: Verify deployment
        run: |
          sleep 60
          curl -f https://strunz.up.railway.app/ || exit 1
          
      - name: Run deployment tests
        run: |
          python src/tests/test_production_mcp.py